generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid())
  email         String             @unique
  token         String?
  username      String             @unique
  name          String
  lastname      String
  password      String
  favoritos     ProductFavorite[]
  prompts       AiQuery[]
  notifications Notification[]
  is_verified   Boolean            @default(false)
  verified_at   DateTime
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Clientes {
  id         String    @id @default(uuid())
  pedidos    Factura[]
  name       String
  email      String
  phone      String
  address    String
  createdAt  DateTime  @default(now())

}

model Factura {
  id          String           @id @default(uuid())
  clienteId   String           @map("id_cliente")
  cliente     Clientes         @relation(fields: [clienteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  detalles    DetalleFactura[]
  emailLogs   EmailLog[]       @relation("FacturaEmailLogs")
  status      StatusFactura    @default(Pendiente)
  total       Float
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model DetalleFactura {
  id          String     @id @default(uuid())
  facturaId   String
  factura     Factura    @relation(fields: [facturaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productoId  String
  producto    Productos  @relation(fields: [productoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cantidad    Int
  precio      Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Productos {
  id                 String            @id @default(uuid())
  nombre             String
  precio_compra      Float
  stock              Int               @default(0)
  favoritosProducto  ProductFavorite[]
  detalles           DetalleFactura[]
  categoryId         String
  category           Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stockHistory       StockHistory[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model Category {
  id         String      @id @default(uuid())
  name       String
  products   Productos[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model ProductFavorite {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  product    Productos   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model AiQuery {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  query      String
  response   String
  createdAt  DateTime   @default(now())
}

model Notification {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  message    String
  is_read    Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Token {
  id         String     @id @default(uuid())
  userId     String
  token      String
  createdAt  DateTime   @default(now())

}

model StockHistory {
  id          String     @id @default(uuid())
  productoId  String
  producto    Productos  @relation(fields: [productoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cantidad    Int
  motivo      String?
  createdAt   DateTime   @default(now())
}

model Roles {
  id        String      @id @default(uuid())
  name      Role        @default(USER)
}

model ProfitSummary {
  id             String      @id @default(uuid())
  fecha_inicio   DateTime
  fecha_fin      DateTime
  ganancia_total Float
  tipo_periodo   TipoPeriodo
  createdAt      DateTime    @default(now())
}

model EmailLog {
  id         String     @id @default(uuid())
  facturaId  String
  factura    Factura    @relation("FacturaEmailLogs", fields: [facturaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status     StatusEmail
}

enum TipoPeriodo {
  Diario
  Mensual
  Semanal
  Anual
}

enum StatusEmail {
  Success
  Failed
}

enum Role {
  ADMIN
  USER
}

enum StatusFactura {
  Pagada
  Pendiente
  Fiada
  Vencida
}
