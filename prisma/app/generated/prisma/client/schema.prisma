// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  token         tokens[]
  username      String            @unique
  name          String
  lastname      String
  password      String
  roleId        String
  role          Roles             @relation(fields: [roleId], references: [id])
  favoritos     ProductFavorite[]
  prompts       Ai_Queries[]
  notifications Notifications[]
  is_verified   Boolean           @default(false)
  verified_at   DateTime
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Factura {
  id        String            @id @default(uuid())
  clienteId String            @map("id_cliente")
  cliente   Clientes          @relation(fields: [clienteId], references: [id])
  detalles  Detalle_factura[]
  status    StatusFactura     @default(Pendiente)
  total     Float
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Detalle_factura {
  id         String    @id @default(uuid())
  facturaId  String
  factura    Factura   @relation(fields: [facturaId], references: [id])
  productoId String
  producto   Productos @relation(fields: [productoId], references: [id])
  cantidad   Int
  precio     Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Productos {
  id                  String            @id @default(uuid())
  nombre              String
  precio_compra       Float
  stock               Int               @default(0)
  productos_favoritos ProductFavorite[]
  detalles            Detalle_factura[]
  categoryId          String
  category            Category          @relation(fields: [categoryId], references: [id])
  stockHistory        StockHistory[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Category {
  id        String      @id @default(uuid())
  name      String
  products  Productos[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ProductFavorite {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  productId String
  product   Productos @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Ai_Queries {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  query     String
  response  String
  createdAt DateTime @default(now())
}

model Notifications {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  is_read   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model tokens {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
}

model Clientes {
  id        String    @id @default(uuid())
  pedidos   Factura[]
  name      String
  email     String
  phone     String
  address   String
  createdAt DateTime  @default(now())
}

model StockHistory {
  id         String    @id @default(uuid())
  productoId String
  producto   Productos @relation(fields: [productoId], references: [id])
  cantidad   Int
  motivo     String?
  createdAt  DateTime  @default(now())
}

model Roles {
  id    String @id @default(uuid())
  name  Role   @default(USER)
  users User[]
}

model ProfitSummary {
  id             String   @id @default(uuid())
  fecha_inicio   DateTime
  fecha_fin      DateTime
  ganancia_total Float
  tipo_periodo   String
  createdAt      DateTime @default(now())
}

model EmailLog {
  id        String      @id @default(uuid())
  facturaId String
  status    StatusEmail
}

enum TipoPeriodo {
  Diario
  Mensual
  Semanal
  Anual
}

enum StatusEmail {
  Success
  Failed
}

enum Role {
  ADMIN
  USER
}

enum StatusFactura {
  Pagada
  Pendiente
  Fiada
  Vencida
}
